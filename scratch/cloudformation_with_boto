

    # validate cloudformation_stacks spec
    err_prefix = "Malformed cloudformation spec in spec-file"
    for cf_spec in spec['cloudformation_stacks']:
        if not isinstance(cf_spec, dict):
            msg = "%s: not a dictionary: '%s'" % (err_prefix, str(cf_spec))
            raise RuntimeError(msg)
        if not 'Name' in cf_spec:
            msg = ("%s: missing 'Name' key near: '%s'" %
                    (err_prefix, str(cf_spec)))
            raise RuntimeError(msg)
        if not ensure_absent(cf_spec):
            required_keys = ['Template', 'Tags']
            for key in required_keys:
                if not key in cf_spec:
                    msg = ("%s: stack '%s': missing required param '%s'" %
                            (err_prefix, cf_spec['Name'], key))
                    raise RuntimeError(msg)
            list_keys = ['Capabilities', 'Parameters', 'Tags']
            for key in list_keys:
                if key in cf_spec and cf_spec[key]:
                    if not isinstance(cf_spec[key], list):
                        msg = ("%s: stack '%s': value of '%s' must be a list." %
                                (err_prefix, cf_spec['Name'], key))
                        raise RuntimeError(msg)


def create_stack(cf_client, args, log, account_name, stack_kwargs):
    """
    Create or update a cloudformation stack using change sets.
    """
    # test if stack already exists and set ChangeSetType accourdingly
    try:
        stack_status = cf_client.describe_stack_events(
                StackName=stack_kwargs['StackName']
                )['StackEvents'][0]['ResourceStatus']
        # edge case: a change set exists, but no stack yet
        if stack_status == 'REVIEW_IN_PROGRESS':
            stack_kwargs['ChangeSetType'] = 'CREATE'
        else:
            stack_kwargs['ChangeSetType'] = 'UPDATE'
    except ClientError as e:
        if not e.response['Error']['Code'] == 'ValidationError':
            raise e
        else:
            stack_kwargs['ChangeSetType'] = 'CREATE'
    except:
        raise
    # create a change set
    stack_kwargs['ChangeSetName'] = stack_kwargs['StackName'] + '-changeset'
    cf_client.create_change_set(**stack_kwargs)
    # check change_set status. loop if CREATE_PENDING.
    counter = 0
    while counter < 5:
        change_sets = cf_client.list_change_sets(
                StackName=stack_kwargs['StackName'])['Summaries']
        change_set = lookup(change_sets, 'ChangeSetName',
                stack_kwargs['ChangeSetName'])
        if change_set['Status'] == 'CREATE_PENDING':
            time.sleep(5)
        elif change_set['Status'] == 'FAILED':
            cf_client.delete_change_set( StackName=stack_kwargs['StackName'],
                    ChangeSetName=stack_kwargs['ChangeSetName'])
            break
        elif (change_set['Status'] == 'CREATE_COMPLETE'
                and change_set['ExecutionStatus'] == 'AVAILABLE'):
            logger(log, "Running %s on stack '%s' in account '%s'." %
                    (stack_kwargs['ChangeSetType'].lower(),
                    stack_kwargs['StackName'], account_name))
            if args['--exec']:
                cf_client.execute_change_set(
                        StackName=stack_kwargs['StackName'],
                        ChangeSetName=stack_kwargs['ChangeSetName'])
            break
        counter += 1


def provision_accounts_in_cloudformation(log, args, deployed_accounts,
        account_spec):
    """
    Generate default resources in new accounts using cloudformation.
    """
    for a_spec in account_spec['accounts']:
        if 'Provision' in a_spec and a_spec['Provision']:
            account_id = lookup(deployed_accounts, 'Name', a_spec['Name'], 'Id')
            if not account_id:
                # check if account is still being built
                created_accounts = scan_created_accounts(org_client)
                if lookup(created_accounts, 'AccountName', a_spec['Name']):
                    logger(log,
                            "New account '%s' is not yet available." %
                            a_spec['Name'])
            else:
                if account_id == account_spec['master_account_id']:
                    cf_client = boto3.client( 'cloudformation',
                            region_name=account_spec['region_name'])
                else:
                    cf_client = get_client_for_assumed_role('cloudformation',
                            account_id, account_spec['org_access_role'],
                            account_spec['region_name'])
                # build specified stacks
                for stack in account_spec['cloudformation_stacks']:
                    template_file = '/'.join(
                            [args['--template-dir'], stack['Template']])
                    template_body = open(template_file).read()
                    stack_kwargs = dict(
                            StackName=stack['Name'],
                            TemplateBody=template_body,
                            Capabilities=stack['Capabilities'],
                            Parameters=stack['Parameters'],
                            Tags=stack['Tags'],)
                    create_stack(cf_client, args, log, a_spec['Name'],
                            stack_kwargs)

