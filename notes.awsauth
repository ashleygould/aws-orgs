Tue Aug  1 08:11:05 PDT 2017

TODO:
DONE document all functions
validate delegation specs
validate policy specs
handle 'ALL' special value in delegations[trusting_accounts]
DONE warn when a user does not exist when populating groups
prevent deletion of org_access_role
delete unused custom policies
report unmanaged iam resources in all accounts
recreate role,policy if path changes
distinguish local only functions
incorporate theading
DONE insert account name when reporting assume role policies
DONE add debug option
DONE handle assigning group policies in auth account.
DONE check for custom policy updates
DONE get org root id
DONE report users, groups, roles
DONE report roles and policies
DONE create users
DONE create groups
DONE populate users in groups
DONE create custom policies
DONE attach policies to groups
DONE create roles
DONE populate roles in other org accounts.
DONE replace functions get_{client/resource}_for_assumed_role()

ISSUES:
how to ensure againts orphan delegations in accounts?
how/where do we structure/deploy yaml data for teams specification?
  maybe place it in a db or ldap or redis?
  currently this resides in the spec-file used by accounts.py.

CONSIDER:
create credentials for new users
email credentials new users
add options for reporting:
  allow separate reports for users, groups, delegations
  allow for multiple levels of detail in delegation reports
validate all path assignments against org 'teams' data spec.





    # delete unused custom policies
    # TODO: be sure this policy is one we actually manage first.  How??
    #policy = iam_resource.Policy(policy_arn)
    #if policy.attachment_count == '0':
    #    logger(log, "Deleting custom policy '%s' from account '%s'." %
    #            (policy_name, account_name))
    #    if args['--exec']:
    #        policy.delete()

# policy for group in trusted accoiunt to assume given role in trusting account.
{
  "Version": "2012-10-17",
  "Statement": {
    "Effect": "Allow",
    "Action": "sts:AssumeRole",
    "Resource": "arn:aws:iam::ACCOUNT-ID-WITHOUT-HYPHENS:role/PATH/ROLENAME"
  }
}



One liners:
aws iam list-policies| grep PolicyName| sort |less
